/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid");
const app = express();

app.use(bodyParser.json());

let todosList = [];

// function to create todos

function createTodo(title, completed, description) {
  const newTodo = {
    id: uuidv4(),
    title,
    completed,
    description,
  };

  return newTodo;
}

// Get all the todos
app.get("/todos", function (req, res) {
  return res.status(200).json(todosList);
});

// Getting todos with a specific id
app.get("/todos/:id", function (req, res) {
  const curerntTodo = todosList.find((todo) => todo.id === req.params.id);

  if (curerntTodo) {
    res.status(200).json(curerntTodo);
  } else {
    return res.status(404).send("Todo not found");
  }
});

// Adding a new todo in our app
app.post("/todos", function (req, res) {
  const bodyData = createTodo(
    req.body.title,
    req.body.completed,
    req.body.description
  );
  todosList.push(bodyData);
  res.status(201).json({ id: bodyData.id });
});

// Updating a Todo
app.put("/todos/:id", function (req, res) {
  const id = req.params.id;

  const foundTodo = todosList.find((todo) => todo.id === id);
  if (!foundTodo) {
    return res.status(404).send("Todo not found");
  }

  const { title, completed, description } = req.body;

  if (title !== undefined) {
    foundTodo.title = title;
  }

  if (completed !== undefined) {
    foundTodo.completed = completed;
  }

  if (description !== undefined) {
    foundTodo.description = description;
  }

  res.status(200).json(foundTodo);
});

// Deleting a Todo with id
app.delete("/todos/:id", function (req, res) {
  const id = req.params.id;
  const curerntTodo = todosList.some((todo) => todo.id === id);

  if (!curerntTodo) {
    return res.status(404).send("Todo not found");
  }

  todosList = todosList.filter((todo) => todo.id !== id);

  res.status(200).json({});
});

app.use(function (req, res) {
  return res.status(404).send("Not Found");
});

// app.listen(3000);

module.exports = app;
